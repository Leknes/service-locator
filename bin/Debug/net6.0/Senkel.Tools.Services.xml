<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Senkel.Tools.Services</name>
    </assembly>
    <members>
        <member name="T:Senkel.Tools.Services.ServiceLocationException">
            <summary>
            This exception is thrown, when a service could not be located by the <see cref="T:Senkel.Tools.Services.ServiceLocator"/> class.
            </summary>
        </member>
        <member name="T:Senkel.Tools.Services.ServiceLocator">
            <summary>
            Is responsible for locating services by type that are registrated using the <see cref="T:Senkel.Tools.Services.ServiceRegistrar"/> class.
            </summary>
        </member>
        <member name="M:Senkel.Tools.Services.ServiceLocator.Get``1">
            <summary>
            Returns the service that has been registrated using by the specified type.
            </summary>
            <typeparam name="T">The type of the service to locate.</typeparam> 
            <exception cref="T:Senkel.Tools.Services.ServiceLocationException">Throws, if the service of the specified type could not be located.</exception>
        </member>
        <member name="T:Senkel.Tools.Services.ServiceProvisionMediator`1">
            <summary>
            Functions as a mediator for setting a way of providing the object of the service to register.
            </summary>
            <typeparam name="T">The type of the service to register.</typeparam>
        </member>
        <member name="M:Senkel.Tools.Services.ServiceProvisionMediator`1.FromInstance(`0)">
            <summary>
            Registers the service of the specified type from the specified instance.
            </summary>
            <param name="instance">The instance to represent the service.</param>
            <returns>A class granting access to unregistrating the service.</returns>
        </member>
        <member name="M:Senkel.Tools.Services.ServiceProvisionMediator`1.FromFactory(Senkel.Model.Creating.IFactory{`0})">
            <summary>
            Sets the service of the specified type to be instantiated using the corresponding <see cref="M:Senkel.Model.Creating.IFactory`1.Create"/> method.
            </summary>
            <param name="factory">The factory to use for instantiating the service.</param>
            <returns>A mediator for registrating by setting the scope of the service.</returns>
        </member>
        <member name="M:Senkel.Tools.Services.ServiceProvisionMediator`1.FromNew``1">
            <summary>
            Sets the service of the specified type to be instantiated newly.
            </summary>
            <typeparam name="TConcrete">The concrete class that will be instantiated newly.</typeparam>
            <returns>A mediator for registrating by setting the scope of the service.</returns>
        </member>
        <member name="M:Senkel.Tools.Services.ServiceProvisionMediator`1.FromMethod(System.Func{`0})">
            <summary>
            Sets the service of the specified type to be instantiated by a method.
            </summary>
            <param name="method">The method that is used for instantiating the service.</param>
            <returns>A mediator for registrating by setting the scope of the service.</returns>
        </member>
        <member name="T:Senkel.Tools.Services.ServiceRegistrar">
            <summary>
            Responsible for registrating services that can be located using the <see cref="T:Senkel.Tools.Services.ServiceLocator"/> class.
            </summary>
        </member>
        <member name="M:Senkel.Tools.Services.ServiceRegistrar.Register``1">
            <summary>
            Prepares the registration of a service of the specified type.
            </summary>
            <typeparam name="T">The type that represents the service.</typeparam>
            <returns>The mediator that is used to finish the registration of the service.</returns>
        </member>
        <member name="T:Senkel.Tools.Services.ServiceScopeMediator">
            <summary>
            Functions as a mediator for registrating a service by setting a scope for the service.
            </summary>
        </member>
        <member name="M:Senkel.Tools.Services.ServiceScopeMediator.AsSingleton">
            <summary>
            Registrated the service as a singleton, which means that the service is always the same, when located. 
            However the service is first instantiated when the service is located the first time.
            </summary>
            <returns>A class granting access to unregistrating the service.</returns>
        </member>
        <member name="M:Senkel.Tools.Services.ServiceScopeMediator.AsNonLazy">
            <summary>
            Registrated the service as a singleton, that is immediately instantiated upon registration.
            </summary>
            <returns>A class granting access to unregistrating the service.</returns>
        </member>
        <member name="M:Senkel.Tools.Services.ServiceScopeMediator.AsTransient">
            <summary>
            Registrated the service as transient, which means that a new instance of service is provided whenever the service is located.
            However, depending on the way of providing the service the reference could also remain the same, like a singleton.
            </summary>
            <returns>A class granting access to unregistrating the service.</returns>
        </member>
        <member name="T:Senkel.Tools.Services.ServiceUnregistrar">
            <summary>
            Grants access to unregistrating a service that has previously been registrated.
            </summary>
        </member>
        <member name="M:Senkel.Tools.Services.ServiceUnregistrar.Unregister">
            <summary>
            Unregisters the corresponding service.
            </summary>
        </member>
    </members>
</doc>
